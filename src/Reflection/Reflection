-Reflection is an API that is used to examine and modify the behaviour of methods, classes
and interfaces at runtime
The required classes for reflection are provided under the java.lang.reflect package
-Reflection gives us information about the class to which an object belongs to and also the
methods of that class that can be executed by using the object
-Through reflection, we can invoke methods at runtime irrespective of the access specifier
used within them

-Reflection can be used to get information about the class, constructors and methods:
Class - The getClass() method is used to get the name of the class to which an object belongs
Constructor - The getConstructors() method is used to get the public constructors of the class
to which the object belongs to
Methods = The getMethod() method is used to get the public method of the class to which the object
belongs to

-We can invoke a method through reflection if we know its name and parameter types
1. getDeclaredMethod();
2. invoke();

Method 1: getDeclaredMethod() - it creates an object of the method to be invoked
Syntax
Class.getDeclaredMethod(name, parametertype)

Parameters:
Name of a method whose object is to be created
An array of Class Objects

Method 2: invoke() - It invokes a method of the class at runtime we use:
Method.invoke(Object, parameter)
//If the method of the class does not accept any parameter then null is passed as an argument

NOTE:Through reflection, we can access the private variables and methods of a class with the help of the
class object and invoke the method by using  the object

Method 3
Class.getDeclaredField(FieldName): Used to get the private field
Returns an object of type Field for the specified field name

Method 4
Field.setAccessible(true): Allows to access the field irrespective  of the access modifier used
with the field

Features of the Reflection API
i)Extensibility Features: An application may make use of external, user-defined classes by creating instances
of extensibility objects using their fully qualified names
ii)Debugging and testing tools: Debuggers use the property of reflection to examine private
members of classes
iii)Performance Overhead: Reflective operations have slower performance than their non-reflective counterparts
and should be avoided in sections of code that are called frequently in performance-sensitive applications
iv)Exposure of Internals: Reflective code breaks abstractions and therefore may change behaviour
with upgrades of the platform



