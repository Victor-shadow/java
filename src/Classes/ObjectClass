=The Object class in java is present in java.lang package.
=Every class in java is directly or indirectly derived from the Object class.
=If a class does not extend any other class then it is a direct child class of the Object class
and if it extends another class it is indirectly derived
=The Object class acts as a root of the inheritance hierarchy in any program

The Object class provides multiple methods which are as follows:
1)toString()method
2)hashCode()method
3)equals(Object obj) method
4)finalize()method
5)getClass()method
6)clone()method
7)wait(), notify(), notifyAll() = Concurrency methods

------------------------------------------------------------------------------------------------------------------------
i)toString()method
=The toString() provides a String representation of an Object and it is used to convert an object
into a string
=The default toString() method for Class Object returns a string consisting of the name of the class of which the object
is an instance
=The '@' character and the unsigned hexadecimal represent the hash code of the object
NOTE: When an Object Reference is printed then internally the toString() method is called

Example:
public class Object{
  public String toString(){
  return "Object"
 }

=The toString() method is overridden to return a custom String representation of a particular object

ii)hashCode() method
=For every Object, The JVM generates a unique number which is a hash code. It returns distinct integers for
distinct objects.
=The hashCode() method converts the internal address of an object to an integer by use of an algorithm

Use of hashCode() method
=It returns the hash value that is used to search objects in a collection
=The Java Virtual Machine uses the hashcode method while saving the objects into hashing-related data structures like
HashSet, HashMap, HashTable
=Override of hashCode() needs to be done so that for every object a unique number is generated

Example:
public class Object{
String name;
@override
public int hashCode(){
return name;
}

=The hashCode() method is overridden to return a custom hash value based on the name of the object

iii)equals(Object obj) method
=The equals() method compares the given object with the current object
=It is recommended to override this method to provide custom equality conditions
NOTE:It is generally necessary to override hashCode() method whenever this method is overridden, so as to maintain the general
contract for the hashCode() method which states that equal objects must have equal hashCodes

public class Object{
String name;

@override
public boolean equals(Object o){
if(o instance of Object){
return this.name == ((Object) o).name;
}
return false
}
}

=The equals() method is overridden to compare name between two Objects


iv)getClass() method
=The getClass() method returns the class Object of "this" object and it is used to get the actual
runtime class of the object
=It can also be used to get the metadata of this class
=The returned Class object is the object that is locked by Static synchronized methods of the represented class
hence as it is final it is not overridden

=After loading a .class file, JVM will create an object of the type java.lang.Class in the heap area
The Class object can be used to get Class-level information


v)finalize method()
=The finalize method is called just before an object is garbage collected
=It is called the Garbage Collector on an object when the garbage collector determines that there are no more references
on an object
=finalize() method should be overridden to dispose of System resources, perform clean-up activities
and reduce memory-leaks
NOTE: The finalize() method is called just once on an object even though that object is eligible for garbage collection
multiple times

Example:
package Classes;

public class FinalizeMethod {
    public static void main(String[]args){
        FinalizeMethod object = new FinalizeMethod();
        System.out.println(object.hashCode());

        object = null;
        //Call garbage Collector
        System.gc();
        System.out.println("end");
    }
    //the finalize() method is called just before the object is garbage collected
    @Override protected void finalize(){
        System.out.println("Finalize method called");
    }

}

vi)clone() method
=It creates and returns a new object that is a copy of the current object
Example:
public class Object implements Cloneable{
  private String name;

  public Object(String name){
    this.name = name;
   }
  @override
  public Object clone() throws CloneNotSupportedException{
      return super.clone()
     }
     }

=The clone() method is overridden  to return a cloned copy of an Object


vii)Concurrency Methods: wait(), notify(), notifyAll()
=They are used to make threads wait or notify others in concurrency programming

Syntax for Using all Object Class Methods
import java.io.*;

public class PlaceholderType implements Cloneable {
    private DataType attribute1;
    private DataType attribute2;

    public PlaceholderType(DataType attribute1, DataType attribute2) {
        this.attribute1 = attribute1;
        this.attribute2 = attribute2;
    }

    // Override toString method for readable output
    @Override
    public String toString() {
        return "PlaceholderType with " + attribute1 + " and " + attribute2;
    }

    // Override equals method for comparison
    @Override
    public boolean equals(Object otherObject) {
        if (otherObject == null || !(otherObject instanceof PlaceholderType)) {
            return false;
        }
        PlaceholderType otherInstance = (PlaceholderType) otherObject;
        return this.attribute1.equals(otherInstance.getAttribute1()) &&
               this.attribute2.equals(otherInstance.getAttribute2());
    }

    // Override hashCode method for hashing logic
    @Override
    public int hashCode() {
        int hash = 17;
        hash = 31 * hash + attribute1.hashCode();
        hash = 31 * hash + attribute2.hashCode();
        return hash;
    }

    // Override clone method for object copying
    @Override
    public PlaceholderType clone() {
        try {
            return (PlaceholderType) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
    }

    // Remove finalize (deprecated in Java)

    public DataType getAttribute1() { return attribute1; }
    public DataType getAttribute2() { return attribute2; }

    public static void main(String[] args) {
        // Create an instance of PlaceholderType
        PlaceholderType instance1 = new PlaceholderType(value1, value2);
        System.out.println(instance1);

        // Clone the object and print
        PlaceholderType instance2 = instance1.clone();
        System.out.println(instance2);

        // Check equality
        System.out.println("instance1 equals instance2: " + instance1.equals(instance2));

        // Print hash codes
        System.out.println("instance1 hash code: " + instance1.hashCode());
        System.out.println("instance2 hash code: " + instance2.hashCode());

        // Set instance1 to null and trigger garbage collection
        instance1 = null;
        System.gc();
    }
}

- PlaceholderType → Generic class name, replace with real entity name.
- DataType → Represents any data type (String, int, etc.).
- attribute1, attribute2 → Example attributes, replace them as needed.
- value1, value2 → Placeholder values to instantiate the class.
- Removed finalize since it is deprecated.






