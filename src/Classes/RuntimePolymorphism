=Method Overriding is one of the ways in which Java supports Runtime polymorphism
=Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at runtime
rather than at compile-time

NOTE:
I)When an overridden method is called through a superclass reference, Java determines which
version(superclass/subclass) of that method is to be executed based upon the type of the object
being referred to at the time the call occurs. Thus, the determination is made at runtime
II)At run-time it depends on the type of the object being referred to and not the type of reference variable that
determines the version of an overridden method will be executed
III)A superclass reference variable can refer to a subclass object. This is also known as upcasting
(used by Java to resolve calls to overridden methods at runtime)

Upcasting
SuperClass object = new SubClass
         Superclass

         Subclass
 NOTE: Subclass extends Superclass

Therefore, if a superclass contains a method that is overridden by a subclass, then when different types of objects are
referred to through a superclass reference variable, different versions of the method are executed

Dynamic Method Dispatch
Example:
// A Java program to illustrate Dynamic Method
// Dispatch using hierarchical inheritance
class A
{
    void m1()
    {
        System.out.println("Inside A's m1 method");
    }
}

class B extends A
{
    // overriding m1()
    void m1()
    {
        System.out.println("Inside B's m1 method");
    }
}

class C extends A
{
    // overriding m1()
    void m1()
    {
        System.out.println("Inside C's m1 method");
    }
}

// Driver class
class Dispatch
{
    public static void main(String args[])
    {
        // object of type A
        A a = new A();

        // object of type B
        B b = new B();

        // object of type C
        C c = new C();

        // obtain a reference of type A
        A ref;

        // ref refers to an A object
        ref = a;

        // calling A's version of m1()
        ref.m1();

        // now ref refers to a B object
        ref = b;

        // calling B's version of m1()
        ref.m1();

        // now ref refers to a C object
        ref = c;

        // calling C's version of m1()
        ref.m1();
    }
}

The program creates one superclass called A and its two subclasses B and C
These subclasses override method m1()

i)Inside the main method in the Dispatch class, initially objects of type A, B and C are declared
A a = new A();
B b = new B();
C c = new C();
ii)A reference of type A called ref is also declared, initially it will point to null
A ref; //obtain a reference of A
iii)A reference is assigned to each object(either A, B or C) to ref one-by-one and uses that reference to invoke m1()
//The version of m1() executed is determined by the type of object being referenced to at the time of call
ref = a; //Refers to a A object
ref.m1(); //Invoking A version of m1
ref = b; //Refers to a B object
ref.m1(); //Invoking B version of m1
ref = c; //Refers to a C object
ref.m1(); //Invoking C version of m1

Runtime Polymorphism with Data Members
=In Java we can override methods only not the variables(data members) so runtime polymorphism
cannot be achieved by data members

Example:
class A {
  int x = 10;
 }
class B extends A{
  int x = 1000;
 }
 //Main Class
 public class Main{
     public static void main(String[]args){
       A a = new B(); //object of type B
       //Data member of class A will be accessed
       System.out.println(a.x);
    }
  }

//Note: Both class A and B have a common variable 'x'. Now to make object of class B referred by 'a' which is of type  class A
Since variables are not overridden, a.x will always refer to data members of class A


Advantages of Dynamic Method Dispatch
1)It allows Java to support overriding of methods which is central for runtime polymorphism
2)It allows a class to access specific methods that will be common to all its derivatives, while allowing subclasses
to define the specific implementation of some or all these methods
3)It also allows subclasses to add its specific methods subclasses to define specific implementation for sme

NOTE:
Static binding is done during compile-time while dynamic binding is done during runtime
Private, final and static methods and variables use static binding and bonded by the compiler while
overridden methods are bonded during runtime based upon type of runtime object
