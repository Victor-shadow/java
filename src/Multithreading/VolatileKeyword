=Using volatile is another way of making class thread safe
=Thread safe means that a method or a class instance can be used by multiple threads at the same time without any problem

Example
class SharedObj{
   //Changes made to sharedVar in one thread may not immediately reflect in another thread
   static int sharedVar = 6;
 }
suppose there are two threads working on SharedObj. If two threads run on different processors, each thread
may have its own local copy of SharedVariable
If one thread modifies its value the change might not reflect in the original one in the main memory instantly
This depends on the write policy of cache. Now the other thread is not aware of the modified value which leads to data inconsistency

NOTE: Writing of normal variables without any synchronization actions might not be visible to any reading thread
(this behaviour is called sequential consistency)

class sharedObj{
//volatile keyword here makes sure that the changes made in one thread
//immediately reflect on the other threads
static volatile int sharedVar = 6;
}

=static variables are class members that are shared among all objects
There is only one copy of them in the main memory

Important features of lock and synchronization
Mutual Exclusion: It means that only one thread or process can execute a block of code (critical section) at a time
Visibility: It means that changes made in one thread to shared data are visible to other threads

=Java synchronized keyword guarantees mutual exclusion and visibility. If we make the block of threads that modify
the value of the shared variable synchronized only one thread can enter the block and changes made by it will be reflected in the main memory
All the other threads trying to enter the block at the same time will be blocked and put to sleep
=In some cases, we may require visibility and not atomicity. The use of synchronized in such a situation is overkill and may cause scalability problems
Here volatile comes to the rescue.
Volatile variables have the visibility features of synchronized but not atomicity features
The values of the volatile variables will never be cached and all writes and reads will be done to and from the main memory
However the use of volatile is limited to a very restricted set of cases as most times atomicity is desired

=volatile tells the compiler that the value of a variable must never be cached as its value may change outside the scope of the program itself

