=A thread in java can exist in any one of the following states at a given time.
=A thread lies only in one of the shown states at any instant:
i)New State
ii)Runnable State
iii)Blocked State
iv)Waiting State
v)Timed Waiting State
vi)Terminated State

Life Cycle of a thread
i)New Thread: When a new thread is created, it is in the new state. The thread has not yet started to run
when the thread is in this state. When a thread lies in the new state, its code is yet to be run and has not started to
execute
ii)Runnable State: A thread that is ready to run is moved to a runnable state. In this state, a thread might actually be running or
it might be ready to run at any instant of time. It is the responsibility of the thread scheduler to give the thread, time to run
A multithreaded program allocates a fixed amount of time to each individual thread. Each and every thread gets a small amount of time
to run. After running for a while, a thread pauses and gives up the CPU so that other threads can run
iii)Blocked: The thread will be in blocked state when it is trying to acquire a lock but the current lock
is acquired by another thread. The thread will move from the blocked state to runnable state when it acquires the lock
iv)Waiting State: The thread will be in waiting state when it calls wait() method or join() method. It will move to the runnable state
when other threads will notify or that thread will be terminated
v)Timed Waiting = A thread lies in the timed waiting state when it calls a method with a time-out parameter
A thread lies in this state until the timeout is completed or until a notification is received
i.e When a thread calls sleep() method or a conditional wait, it is moved to the timed waiting state
vi)Terminated State: A thread terminates because of either of the following reasons
:Because it exits normally: This happens when the code of the thread has been entirely executed
by the program
:Because there occurred some unusual erroneous event, i.e segmentation fault or an unhandled Exception

Threads State in Java
=In Java, to get the current state of the thread use: Thread.getState() method
=Java provides the java.lang.Thread.State enum that defines the ENUM constants for the state of a thread

1. New
Thread state for a thread that has not started yet
public static final Thread.State.NEW

2. Runnable
Thread state for a runnable thread. A thread in the runnable state is executing in the Java Virtual Machine but it may be waiting for other resources
from the operating system such as a processor
public static final Thread.State RUNNABLE

3. BLOCKED
Thread state for a thread blocked waiting for a monitor lock
A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method
after calling Object.wait() method

public static final Thread.State BLOCKED

4. WAITING
Thread state for a waiting thread
=A thread is in the waiting state due to calling one of the following methods
Object.wait() = no timeout
Thread.join() = no timeout
LockSupport.park

public static final Thread.State WAITING

5.Timed Waiting
Thread state for a waiting thread with a specified waiting time
=A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:
i)Thread.sleep
ii)Object.wait with timeout
iii)Thread.join with timeout
iv)LockSupport.parkNanos
v)LockSupport.parkUtil

public static final Thread.State TIMED_WAITING

6)Terminated
Thread state for a terminated thread. The thread has completed execution

public static final Thread.State TERMINATED

