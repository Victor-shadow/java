=A Thread is a line of Execution within a program
=Each program can have multiple associated threads
=Each thread has a priority which is used by the thread scheduler to determine which thread must run first
=Java provides a thread Class that has various method calls to manage the behaviour of threads by providing constructors
and methods to perform operations on threads
=A Thread is a program that starts with a method () frequently used in this class known as  a start() method
//This method looks out for the run() method which is also a method of this class and begins executing the body of the run method

NOTE: Every Class that is used as a thread must implement the Runnable Interface and override its run method

Syntax:
public class Thread extends Object implements Runnable

Constructors of Thread Class
I)Thread() =  allocates a new Thread Object
II)Thread(Runnable target) = Allocates a new Thread Object
III)Thread(Runnable target, String name) = Allocates a new thread Object
IV)Thread(String name) = Allocates a new Thread Object
V)Thread(ThreadGroup group, Runnable target) = Allocates a new Thread Object
VI)Thread(ThreadGroup group Runnable Target, String name) = Allocates a new thread object so that it has targeted its run object has the specified name as its name
and belongs to the thread group referred to by a group
VII)Thread(ThreadGroup group, Runnable Target, String name, long StackSize) = Allocates a new Thread object so that it has targeted as its run object
has the specified name as its name and belongs to the thread group referred to by group and has the specified stack size
VIII)Thread(ThreadGroup group, String name) = Allocates a new Thread Object


Methods Of Thread Class
1)activeCount() = Returns an estimate of the number of active Threads in the current thread group and subgroup
2)checkAccess() = Determines if the current thread has permission to modify this thread
3)clone() = Throws CloneNotSupportedException as a Thread cannot be meaningfully Cloned
4)currentThread() = Returns a reference to the current executing thread object
5)dumpStack() = Prints the current stack Trace  of the thread to the standard error stream
6)enumerate(Thread[]tarray) = Copies into the specified array every active thread in the current Thread group and its subgroup
7)getAllStackTraces() = Returns a map of Stack Traces for all live threads
8)getContextClassLoader() = Returns the context ClassLoader for this thread
9)getDefaultUncaughtExceptionHandler() = Returns the default  handler invoked when a thread abruptly terminates due to an uncaught exception
10)getId() = Returns the identifier of this thread
11)getName() =Returns thread's name
12)getPriority() = Returns thread priority
13)getStackTrace() = Returns an array of stack Trace elements representing the stack dump of the thread
14)getState() = Returns thr state of the thread
15)getThreadGroup() = Returns the thread group to which the thread belongs
16)getUncaughtExceptionHandler() = Returns the handler invoked when this thread abruptly terminates due to an uncaught exception
17)holdsLock(Object obj) = Returns true if and  only if the current thread holds the monitor lock on the object
18)interrupt() = Interrupts this thread
19)interrupted() = Tests whether the current thread is interrupted
20)isAlive() = Tests if the thread is Alive
21)isDaemon() = tests if the thread is Daemon
22)isInterrupted() = Tests whether the thread has been interrupted
23)join() = waits for the thread to die
24)join(long millis) = Waits at most milliseconds for this thread to die
25)run() = If this thread was constructed using a Separate Runnable object then that Runnable object's run method is called; otherwise this method does nothing
26)setsContextClassLoader(Class Loader cl) = Sets the context ClassLoader for this thread
27)setDaemon(boolean on) = marks this thread as either daemon thread or user thread
28)setName(String name) = changes the name of this thread to be equal to the argument name

29)setUncaughtExceptionHandler(Thread.uncaughtExceptionHandler eh) = Set the handler invoked when this thread abruptly terminates due to an uncaught exception
30)setPriority(int new Priority) = Changes the priority of the thread
31)sleep(long millis) = Causes the current executing thread to sleep(temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and
schedulers
32)start() = Causes the thread to begin execution. The Java Virtual Machine calls the run method to this thread
33)toString() = Returns a String representation of this thread including the thread name, priority and thread group
34)yield() = A hint to the scheduler that the current thread is willing to yield its current use of a processor
35)setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh) = Sets the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread

Methods inherited from java.lang.Object class
1)equals()
2)finalize()
3)getClass()
4)hashCode()
5)notify()
6)notifyAll()
7)toString()
8)wait()

