A try-catch block in Java is a mechanism to handle exceptions.This makes sure that the application continues to run even if an error occurs
=The code inside the try block continues to be executed, and if any exception occurs it is then caught
by the catch block

Syntax of try-catch block
try{
//Code that might throw an exception
} catch(Exception Type e ) {
//code that handles the exception
}

try in Java
The try block contains a set of statements where an exception can occur
try{
//statement that may cause exception
}

catch in Java
=The catch block is used to handle the uncertain condition of a try block
=A try block is always followed by a catch block, which handles the exception that
occurs in the associated try block

catch{
  //statement(s) that handle an exception
  //closing a connection, close a file, exiting the process after writing details to a file
}

Internal Working of a try-catch block
i)Java Virtual Machine starts executing the code inside the try block
ii)If an exception occurs, the remaining code in the try block is skipped, and the JVM starts looking
for the matching catch block
iii)If a matching catch block is found, the code in the block is executed
iv)After the catch block, control moves to the finally block(if present)
v)If no matching catch block is found the exception is passed to the JVM default exception handler
vi)The final block is executed after the try catch block. regardless of whether an exception occurs or not

try{
//this will throw Arithmetic Exception
int ans = 10 / 0;

} catch(ArithmeticException e){
System.out.println('Arithmetic exception caught')
} finally {
System.out.println("This block will always execute whether an Exception occurs or not")
}