-Annotations are used to provide supplementary information about a program:
i)Annotations start with '@'
ii)Annotations do not change the action of a compiled program
iii)Annotations help to associate the metadata(information) to the program elements i.e
instance variables,constructors, methods, classes
iv)Annotations basically are used to provide additional information
v)Annotations are not pure comments as they can change the way the program is treated
by the compiler

                              Hierarchy of Annotations
Standard(Built in) Annotations                                                                         Custom Annotations
General Purpose annotation                     Meta annotation
(java.lang.package)                            (java.lang.annotation.package)
@Override                                      @Inherited
@Deprecated                                    @Documented
@SafeVarArgs                                   @Target
@SuppressWarnings                              @Retention
@FunctionalInterface                           @Repeatable

Categories of Annotations
1.Marker Annotations
2.Single value Annotations
3.Full Annotations
4.Type Annotations
5.Repeating Annotations


// Class 1
class Base {

    // Method
    public void display()
    {
        System.out.println("Base display()");
    }
}

// Class 2
// Main class
class Derived extends Base {

    // Overriding method as already up in above class
    @Override public void display(int x)
    {
        // Print statement when this method is called
        System.out.println("Derived display(int )");
    }

    // Method 2
    // Main driver method
    public static void main(String args[])
    {
        // Creating object of this class inside main()
        Derived obj = new Derived();

        // Calling display() method inside main()
        obj.display();
    }
}


MARKER ANNOTATIONS
-The only purpose is to mark a declaration
-These annotations contain no members and do not consist of any data. Thus, its presence as an annotation
is sufficient. Since the marker interface contains no members, simply determining whether it is present or absent
is sufficient
i.e @Override is an example of a marker annotation
@TestAnnotation


SINGLE VALUE ANNOTATION
-These annotations contain only one member and allow a shorthand form of specifying the value of the member
-We only need to specify the value for that member when the annotation is applied and don't need to specify
the name of the member
@TestAnnotation("testing")

FULL ANNOTATIONS
-These annotations consist of multiple data members, names, values, pairs
@TestAnnotation(owner="James", "language="Java")

TYPE ANNOTATIONS
These annotations can be applied to any place where a type is being used

REPEATING ANNOTATIONS
-These are annotations that can be applied to a single item more than once
-For an annotation to be repeatable, it must be annotated with the @Repeatable annotation, which is
defined in the java.lang.annotation package. Its value field specifies the container type for the repeatable annotation
The container is specified as an annotation whose value field is an array of the repeatable annotation type
-Hence, to create a repeatable annotation, firstly the container annotation is created, and then
the annotation type is specified as an argument to the @RepeatableAnnotation

Predefined/Standard Annotations
-Java popularly defines seven built-in annotations
:Four are imported from the java.lang.annotation
@Retention
@Documented
@Target
@Inherited

Three are included:
@Deprecated
@Override
@SuppressWarnings

Annotation 1:
@Deprecated
-It is a marker annotation. It indicates that a declaration is obsolete and has been replaced by a newer form
-The javadoc @deprecated tag should be used when an element has been deprecated
-@deprecation tag is for documentation and the @Deprecated annotation is for runtime reflection
@deprecation tag has a higher priority than @Deprecated annotation when both together are used

Annotation 2:
@Override
-It is a marker annotation that can only be used on methods
-A method annotated with @Override must override a method in the superclass. If it doesn't a compile-time error
will result
-It is used to ensure a superclass method is overridden and not simply overloaded

Annotation 3:
@SuppressWarnings
-It is used to inform the compiler to suppress specified compiler warnings
-The warnings to suppress are specified by name, in string form
This type of annotation can be applied to any type of declaration
Java group warnings are under two categories:
i)deprecated
ii)unchecked
-Any unchecked warning is generated when a legacy code interfaces with a code that uses generics

Annotation 4:
@Documented
-It is a marker interface that tells a tool that an annotation is to be documented
-Annotations are not included in 'Javadoc' comments
//The use of @Documented annotation in the code enables tools like Javadoc to process it and include
annotation type information in the generated document

Annotation 5:
@Target
-It is designed to be used only as an annotation to another annotation
-@Target takes one argument , which must be constant from the ElementType enumeration
-This argument specifies the type of declarations to which the annotation can be applied

Target Constant                                              Annotations Can Be Applied To
ANNOTATION_TYPE                                              Another annotation
CONSTRUCTOR                                                  Constructor
FIELD                                                        Field
LOCAL_VARIABLE                                               Local variable
METHOD                                                       Method
PACKAGE                                                      Package
PARAMETER                                                    Parameter
TYPE                                                         Class interface, enumeration

-We can specify one or more of these values in a @TargetAnnotation
To specify multiple values, we must specify them within a braces-delimited list
-to specify that an annotation applies only to fields and local variables you can use this @Target annotation:
@Target({ElementType.FIELD, ElementType.LOCAL_VARIABLE})
@Retention Annotation it determines where and how long the annotation is retent
The 3 values that the @Retention annotation can have:
i)SOURCE: Annotations will be retained at the source level and ignored by
the compiler
ii)CLASS: Annotations will be retained at compile time.and ignored by the JVM
iii)RUNTIME: This will be retained at runtime

Annotation 6:
Inherited
-@Inherited is a marker annotation that can be used only as an annotation declaration
-It affects only annotations that will be used on class declarations
@Inherited causes the annotation for a superclass to be inherited by that of the subclass
-Therefore, when we request for a specific annotation is made to the subclass, if that annotation is not
present in that subclass, then its superclass is checked
-If that annotation is present in the superclass, and if annotated with @Inherited, then the annotation
will be returned

Annotation 7:
User-Defined
User-defined annotations can be used to annotate program elements i.e variables, constructors, methods
These annotations can be applied just before the declaration of an element(constructor, method, classes)
Syntax:
[Access-Specifier] @interface<Annotation name>
{
DataType <MethodName>() [default value];
}

1.Annotation name is an interface
2. The parameter should not be associated with method declarations and throws clause should
not be used with method declaration
3. Parameters will not have a null value but can have a default value
4. default value is optional
5. The return type of method should either be primitive, enum, string, class name, or an array of primitive, enum, string,
class name type
