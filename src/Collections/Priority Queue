-The Priority Queue class in java is part of the java.util package. It implements the priority-heap based
queue that processes the element based on their priority  rather than FIFO(First-In-First-Out)
concept of a Queue
Note:
i)The PriorityQueue is based on a Priority Heap
ii)The elements of the priority queue is ordered according to  natural ordering, and elements must
implement Comparable, or by a Comparator provided at queue construction time, depending on which
constructor is used
iii)The size of a Priority Queue is dynamic, this means it will increase or decrease per
requirement

------------------------------------------------------------------------------------------------------------------------
                           PriorityQueue Class Hierarchy
                                     Iterable
                                     (Interface)

                                     Collection
                                     (Interface)

                                     Queue
                                     (Interface)

                                     Deque                              PriorityQueue
                                     (Interface)                        (Class)

        LinkedList                                                      ArrayDeque
        (Class)                                                         (Class)
------------------------------------------------------------------------------------------------------------------------

Declaration of a Priority Queue
*public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable

where E, is the type of element held in this queue
The class implements Serializable, Iterable<E>, Queue<E> and Collection<E> interface

Note:
i)PriorityQueue does not permit null elements
ii)We cannot create PriorityQueue of Objects that are non comparable
iii)PriorityQueue are unbound Queues
iv)The head of this queue is the least element with respect to the specified ordering
v)Since PriorityQueue is not thread safe, Java provides the PriorityBlockingQueue class
that implements the BlockingQueue interface to use Java multithreading environment
vi)The queue retrieval operations poll, remove, peek and element access the element at the head
of the queue
vii)It provides O(log(n)) time for add and poll methods
viii)It inherits methods from AbstractQueue, AbstractCollection, Collection and Object
class

Constructors
i)PriorityQueue(): This method creates a priority Queue with the default initial capacity(11)
and orders its elements according to their natural ordering
*PriorityQueue<E> priorityQueue = new PriorityQueue<E>();

ii)PriorityQueue(Collection<E> c): This creates a PriorityQueue containing the elements in the specified
collection
*PriorityQueue<E> priorityQueue = new PriorityQueue<E>(Collection<E>c);

iii)PriorityQueue(int initialCapacity): This creates a PriorityQueue with the specified
initial capacity that orders its elements according to their natural ordering
*PriorityQueue<E> priorityQueue = new PriorityQueue<E>(int initialCapacity)

iv)PriorityQueue(int initialCapacity, Comparator<E> comparator): This creates a PriorityQueue
with the specified initial capacity that orders its elements according to the specified comparator
*PriorityQueue<E> priorityQueue = new PriorityQueue(int initialCapacity, Comparator<E> comparator)

v)PriorityQueue(PriorityQueue<E> c): This creates a PriorityQueue containing all elements in the specified priority
Queue
*PriorityQueue<E> priorityQueue = new PriorityQueue(PriorityQueue<E> c)

vi)PriorityQueue(SortedSet<E> c): This creates a PriorityQueue containing the elements in the specified sorted set
*PriorityQueue<E> priorityQueue = new PriorityQueue<E>(SortedSet<E> c)

vii)PriorityQueue(Comparator<E> comparator) - This creates a PriorityQueue  with the default initial capacity
and whose elements are ordered according to the specified comparator
*PriorityQueue<E> priorityQueue = new PriorityQueue<E>(Comparator<E>c)

Basic Operations of a PriorityQueue
*boolean add(E element): This method inserts the specified element into this priorityQueue
*public peek(): This method retrieves but does not remove, the head of this queue, or returns null if the
queue is empty
*public poll(): This method retrieves and removes the head of this queue or returns null if the queue is empty

------------------------------------------------------------------------------------------------------------------------
Methods in PriorityQueue class
i)add(E e): Inserts the specified element into this priority Queue

ii)clear(): Removes all the elements from the priority Queue

iii)comparator(): Returns the comparator used to order the elements in this queue, or null if the queue
is sorted according to the natural ordering of the elements

iv)contains? (Object o): Returns true if the Queue contains the specified elements

v)forEach?(Consumer<?super E> action): Performs the given action for each element of the Iterable
until all the elements have been processed or the action throws an exception

vi)iterator(): Returns an iterator over the elements in this queue

vii)offer?(E e): Inserts the specified element into this priority Queue

viii)remove?(Object o): Removes a single instance of the specified element from this queue if
it is present

ix)removeIf?(Predicate<? super E> filter): Removes all the elements of this collection that satisfy the given
predicate

x)retainAll?(Collection<?>c): Retains only the elements in this collection that are contained in the specified
collection(optional operation)

xi)spliterator(): Creates a late-binding and fail-fast Spliterator over the elements in this queue

xii)toArray(): Returns an array containing all the elements in this queue

xiii)toArray?(T[]a): Returns an array containing all the elements in this queue; The runtime type
of the returned array is that of the specified array

------------------------------------------------------------------------------------------------------------------------
Methods declared in class java.util.AbstractQueue
i)addAll(Collection<? extends E> c) : Adds all of the elements in the specified collection to this queue

ii)element(); Retrieves, but does not remove, the head of this queue

iii)remove(): Retrieves and removes the head of this queue

------------------------------------------------------------------------------------------------------------------------
Methods declared in class java.util.AbstractCollection
i)toString(): Returns a String representation of the collection

ii)isEmpty(): Returns true if the collection contains no elements

iii)containsAll(Collection<?>c): Returns true if this collection contains all the elements
in the specified collection

------------------------------------------------------------------------------------------------------------------------
Methods declared in java.util.Queue
peek(): Retrieves but does not remove, the head of this queue, or returns null, if the queue is empty

poll(): Retrieves and removes the head of the queue, or returns null if the queue is empty

Methods declared in Interface java.util.Collection
1: containsAll(Collection<?> c) : Returns true if this collection contains all the elements in the specified collection

2:equals(Object o): Compares the specified object with this collection for equality

3:hashCode(): Returns the hash Code value for the collection

4:isEmpty(): Returns true if this collection contains no elements

5:parallelStream(): Returns a possibly parallel stream with this collection at its source

6:size(): Returns the number of elements in the collection

7:stream(): Returns a Sequential stream with this collection as its source

8:toArray(IntFunction<T[]>generator): Returns an array containing all the elements in the collection
using the provided generator function to allocate the returned array
