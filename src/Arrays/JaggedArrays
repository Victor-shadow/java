
=A jagged array is a multi-dimensional array where each row can have a different number of columns
=It is like a 2D array, but each row can have a different number of elements
=The inner array can be of different lengths

=> Example: arr[][] = {{10, 20}, {30, 40, 50}, {60, 70, 80, 90}};
It is a jagged array since the number of columns in each row is different

//Declaration and Initialization of a jagged array
Declaration of a jagged array:
array_name[0] = new_data_type[n1] //n1 = no of columns in row-1
array_name[1] = new_data_type[n2] //n2 = no of columns in row-2
array_name[2] = new_data_type[n3] //n3 = no of columns in row-3

Alternative ways to initialize a jagged array:
//Method1: int arr_name[][] = new int[][]{
new int[] {10, 20, 30, 40, 50, 60}
new int[] {70, 80, 90, 100}
new int[] {110, 120, 130, 140}
}
//Method2: int[][]arr_name = {
new int[] {10, 20, 30, 40}
new int[] {50, 60, 70, 80}
new int[] {90, 100, 110, 120}
}
//Method3: int[][]arr_name = {
{10, 20, 30, 40}
{50, 60, 70, 80}
{100, 110, 120}
}

//Advantages of jagged Arrays
=The size of a jagged array can be changed at runtime
=Jagged arrays save memory since it utilizes space only what it is required
= It is suitable for working with data that has rows with different columns
= They are faster

